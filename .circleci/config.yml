version: 2.1

executors:
  node:
    docker:
      - image: circleci/node:13.8.0
        auth:
          username: $DOCKERHUB_USERNAME  
          password: $DOCKERHUB_PASSWORD 
  aws:
    docker:
      - image: amazon/aws-cli
  python:
    docker:
      - image: python:3.9.0-alpine

commands:   
  destroy_environment:
    parameters:
      when:
        type: string
      id:
        type: string
    steps:
      - run:
          name: Destroy environment
          command: |
            aws cloudformation delete-stack --stack-name stack-<< parameters.id >>
          when: << parameters.when >>

jobs:

  install-dependencies:
    executor: node
    steps:
    - checkout
    - run:
        name: npm install 
        working_directory: .
        command:  ls -la && npm install 
    - persist_to_workspace:
        root: .
        paths:
          - ./node_modules
  build:
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: ng build
          working_directory: .
          command: npm run build
  test:
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install junit coverage reporter
          working_directory: .
          command: npm install --save-dev jest-junit
      - run:
          name: Run tests with JUnit as reporter
          working_directory: .
          command: npm test -- --ci --runInBand --reporters=default --reporters=jest-junit && pwd && ls -la /tmp

      - store_test_results:
          path: ./test_results
      - store_artifacts:
          path: ./test_results

  analyze:
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Check  against security vulnerabilities
          working_directory: .
          command: npm audit --audit-level=critical
  create_infrastructure:
    executor: aws
    steps:
      - checkout
      - run:
          name: deploy  infrastructure 
          command: |
            aws cloudformation create-stack \
            --template-body file://template.yml \
            --stack-name prod-${CIRCLE_WORKFLOW_ID} \
            --parameters file://parameters.yml \
            --tags project=devops-${CIRCLE_WORKFLOW_ID} \
            --region=us-east-1
      - run:
          name: Add instance ip to ansible inventory
          working_directory: ./.circleci/ansible
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=devops-${CIRCLE_WORKFLOW_ID}" \
              --output text > inventory
            cat inventory
      - persist_to_workspace:
          root: .
          paths:
            - .circleci/ansible/inventory
      - destroy_environment:
          id: prod-${CIRCLE_WORKFLOW_ID}
          when: on_fail 
  
  configure_infrastructure:
    executor: python
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["fa:dd:dd:92:44:6b:af:72:17:6f:7e:c7:80:93:d2:f1"] 
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          working_directory: ./.circleci/ansible
          command: |
            apk add --update ansible
            ansible --version
      - run:
          name: Configure server
          working_directory: ./.circleci/ansible
          command: ansible-playbook -i inventory configure.yaml
      - run: 
          name: run application 
          working_directory: ./.circleci/ansible
          command: ansible all -m command -a 'sudo ng serve' 
      - destroy_environment:
          id: prod-${CIRCLE_WORKFLOW_ID}
          when: on_fail

  smoke_test:
    executor: python
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run: sudo apk add --update curl npm
      - run:
          name: smoke test
          working_directory: .
          command: |
            IP= ` cat inventory`
            export URL="http://$IP:4200"
            curl "$URL"
      - destroy_environment:
           id: prod-${CIRCLE_WORKFLOW_ID}
           when: on_fail

  

workflows:
  
  project:
    jobs:
      - install-dependencies
      - build:
          requires:
            - install-dependencies
      - test:
          requires:
            - build
      - analyze:
          requires:
            - build
      - create_infrastructure:
          requires:
            - build
      - configure_infrastructure:
          requires:
            - create_infrastructure
      - smoke_test:
          reuires:
            - test
            - build
            - create_infrastructure
            - analyze
            - configure_infrastructure


      